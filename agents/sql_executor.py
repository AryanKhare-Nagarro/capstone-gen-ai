from state import DataState
from database_mcp.client import mcp_client

def sql_executor_agent(state: DataState):
    """
    Execute SQL queries using MCP client and return raw results.
    """
    try:
        # Get the SQL query generated by sql_retriever_agent
        sql_query = state.get("sql_query")
        
        if not sql_query:
            return {**state, "context_docs": "No SQL query available to execute."}
        
        # Execute query through MCP client
        result = mcp_client.execute_query(sql_query)
        
        if result["success"]:
            # Format results for presentation
            formatted_results = format_query_results(result["results"])
            execution_context = f"SQL Query: {sql_query}\n\nQuery Results:\n{formatted_results}"
            return {**state, "context_docs": execution_context}
        else:
            error_context = f"SQL Query: {sql_query}\n\nError executing query: {result['error']}"
            return {**state, "context_docs": error_context}
            
    except Exception as e:
        error_msg = f"Error in SQL executor agent: {str(e)}"
        return {**state, "context_docs": error_msg}

def format_query_results(results: list) -> str:
    """
    Format query results for presentation.
    """
    if not results:
        return "No results found."
    
    if len(results) == 1 and len(results[0]) == 1:
        # Single value result
        if isinstance(results[0], dict):
            return str(list(results[0].values())[0])
        else:
            return str(results[0][0] if results[0] else "")
    else:
        # Multiple rows/columns - create table format
        if isinstance(results[0], dict):
            headers = list(results[0].keys())
        else:
            headers = [f"Column_{i}" for i in range(len(results[0]) if results else 1)]
        
        if not headers:
            return "No columns found."
            
        table_str = " | ".join(headers) + "\n"
        table_str += "|".join(["---" for _ in headers]) + "\n"
        
        for row in results[:20]:  # Limit to 20 rows for readability
            if isinstance(row, dict):
                row_values = [str(row.get(h, "")) for h in headers]
            else:
                row_values = [str(val) for val in row]
            table_str += " | ".join(row_values) + "\n"
        
        if len(results) > 20:
            table_str += f"\n... and {len(results) - 20} more rows"
        
        return table_str